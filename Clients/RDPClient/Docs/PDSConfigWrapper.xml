<?xml version="1.0" encoding="utf-8" ?>
<!--Management interface-->
<PdsConfigWrapper>
  <GetPds>
    <summary>
      Returns list of PDS discovered either form DNS or from GPO
    </summary>
    <returns>Returns list of PDS instances discovered</returns>
    <remarks>
      <para>No specific permissions required</para>
      <para>Call is not audited</para>
    </remarks>
  </GetPds>
  <GetSupportedForest>
    <summary>
      Calls PDS to get list of supported forests as configured in PDS configuration file.
    </summary>
    <param name="Pds">
      Identifies PDS instance to query list of supported forests.
    </param>
    <returns>List of names of AD forests as known by given PDS instance (optionaly with connection credentials and id of enryption key that is used to protect them is configuration file), or null if no specific AD forests are configured and PDS just covers local AD forest.</returns>
    <remarks>
      <para>PDS Admin role is required to successfully call this method</para>
      <para>Call is audited</para>
    </remarks>
  </GetSupportedForest>
  <AddSupportedForest>
    <summary>
      Calls PDS to add new AD forest to list of supported forests.
    </summary>
    <param name="Pds">
      Identifies PDS instance that will be target of the operation. If operating more intances of PDS, supported AD forest must be added to each of them, so as PDS configuration is consistent across all instances.
    </param>
    <param name="Forest">
      Specifies parameters of the newly supported forest
    </param>
    <returns>Newly added supported forest.</returns>
    <remarks>
      <para>PDS Admin role is required to successfully call this method</para>
      <para>Call is audited</para>
    </remarks>
  </AddSupportedForest>
  <SetSupportedForest>
    <summary>
      Calls PDS to update supported forest parameters (typically connection credentials).
    </summary>
    <param name="Pds">
      Identifies PDS instance to perform the operation on. If operating more intances of PDS, update must be performed on each of them to ensure consistency of configuration across all instances of PDS.
    </param>
    <param name="Forest">
      Specifies parameters to be updated on the forest
    </param>
    <returns>Updated supported forest.</returns>
    <remarks>
      <para>PDS Admin role is required to successfully call this method</para>
      <para>Call is audited</para>
    </remarks>
  </SetSupportedForest>
  <RemoveSupportedForest>
    <summary>
      Calls PDS to add remove AD forest from list of supported forests.
    </summary>
    <param name="Pds">
      Identifies PDS instance to remove the forest from list of supported forests. If operating more intances of PDS, supported AD forest must be removed from each of them.
    </param>
    <param name="Forest">
      Specifies parameters of the removed forest. Only DNS name of Forest is used to identify forest to be removed.
    </param>
    <returns>Removed forest.</returns>
    <remarks>
      <para>PDS Admin role is required to successfully call this method</para>
      <para>Call is audited</para>
    </remarks>
  </RemoveSupportedForest>
  <AddSidMapping>
    <summary>
      Calls PDS to add maping of security principal from untrusted forest to security principal from trusted forest.
    </summary>
    <param name="Pds">
      Identifies PDS instance to work with. If operating more intances of PDS, SID mapping must be added to each of them to ensure configuration consistency.
    </param>
    <param name="Mapping">
      Specifies parameters of the SID mapping.
    </param>
    <returns></returns>
    <remarks>
      <para>PDS Admin role is required to successfully call this method</para>
      <para>Call is audited</para>
    </remarks>
  </AddSidMapping>
  <UpdateSidMapping>
    <summary>
      Calls PDS to modify maping of security principal from untrusted forest to security principal from trusted forest.
    </summary>
    <param name="Pds">
      Identifies PDS instance to work with. If operating more intances of PDS, SID mapping must be updated on each of them to ensure configuration consistency.
    </param>
    <param name="Mapping">
      Specifies parameters of the SID mapping.
    </param>
    <returns></returns>
    <remarks>
      <para>PDS Admin role is required to successfully call this method</para>
      <para>Call is audited</para>
    </remarks>
  </UpdateSidMapping>
  <GetSidMapping>
    <summary>
      Calls PDS to get configured mapings of security principal from untrusted forest to security principal from trusted forest.
    </summary>
    <param name="Pds">
      Identifies PDS instance to work with.
    </param>
    <returns>List of configured SID mappings</returns>
    <remarks>
      <para>Can be called by any authenticated user</para>
      <para>Call is not audited</para>
    </remarks>
  </GetSidMapping>
  <RemoveSidMapping>
    <summary>
      Calls PDS to add remove SID mappings from list of mappings.
    </summary>
    <param name="Pds">
      Identifies PDS instance to remove the mapping from. If operating more intances of PDS, mapping must be removed from each of them.
    </param>
    <param name="PrimarySid">
      Specifies Primary SID of mapping to be removed.
    </param>
    <returns></returns>
    <remarks>
      <para>PDS Admin role is required to successfully call this method</para>
      <para>Call is audited</para>
    </remarks>
  </RemoveSidMapping>
  <AddManagedAccountsContainer>
    <summary>
      Calls PDS to add AD container with accounts with automatically managed password.
    </summary>
    <param name="Pds">
      Identifies PDS instance to work with. If operating more intances of PDS, container must be added to configuration of each of them to ensure configuration consistency.
    </param>
    <param name="Container">
      Specifies parameters of password for accounts located in AD container.
    </param>
    <returns></returns>
    <remarks>
      <para>PDS Admin role is required to successfully call this method</para>
      <para>Call is audited</para>
    </remarks>
  </AddManagedAccountsContainer>
  <GetManagedAccountsContainer>
    <summary>
      Calls PDS to retrieve configuration of AD containers with accounts with automatically managed password.
    </summary>
    <param name="Pds">
      Identifies PDS instance to work with.
    </param>
    <returns>List of managed domain acocunts containers as defined in PDS configuration file.</returns>
    <remarks>
      <para>Can be called by any authenticated user</para>
      <para>Call is not audited</para>
    </remarks>
  </GetManagedAccountsContainer>
  <SetManagedAccountsContainer>
    <summary>
      Calls PDS to update configuration of AD container with accounts with automatically managed password.
    </summary>
    <param name="Pds">
      Identifies PDS instance to work with. If operating more intances of PDS, container must be updated on each of them to ensure configuration consistency.
    </param>
    <param name="Container">
      Specifies parameters of password for accounts located in given AD container.
    </param>
    <returns></returns>
    <remarks>
      <para>PDS Admin role is required to successfully call this method</para>
      <para>Call is audited</para>
    </remarks>
  </SetManagedAccountsContainer>
  <RemoveManagedAccountsContainer>
    <summary>
      Calls PDS to remove AD container with accounts with automatically managed password from PDS configuration.
    </summary>
    <param name="Pds">
      Identifies PDS instance to work with. If operating more intances of PDS, container must be removed from each of them to ensure configuration consistency.
    </param>
    <param name="DN">
      Specifies distinguishedName of container to be removed from configuration.
    </param>
    <returns></returns>
    <remarks>
      <para>PDS Admin role is required to successfully call this method</para>
      <para>Call is audited</para>
    </remarks>
  </RemoveManagedAccountsContainer>

</PdsConfigWrapper>