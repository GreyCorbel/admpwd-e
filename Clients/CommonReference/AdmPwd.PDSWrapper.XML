<?xml version="1.0"?>
<doc>
    <assembly>
        <name>AdmPwd.PDSWrapper</name>
    </assembly>
    <members>
        <member name="T:AdmPwd.PDSUtils.PdsWrapper">
            <summary>
            Wrapper class that exposes PDS interface for client applications and implements PDS autodiscovery and fault tolerance according to configuration distributed by Group Policy
            </summary>
        </member>
        <member name="M:AdmPwd.PDSUtils.PdsWrapper.GenerateKeyPair(System.Int32)">
            <summary>
            Calls PDS to generate new RSA key pair.
            </summary>
            <param name="KeySize">Specifies desired RSA key size
            Key size must be one of those allowed by PDS - see <see cref="M:AdmPwd.PDSUtils.PdsWrapper.GetSupportedKeySizes"/> method
            </param>
            <returns>Return public key of newly generated key pair, along with key ID assigned to newly generated key pair</returns>
            <remarks>
            <para>Caller must have Key Admin role. For callers without role, AccessDenied exception is returned</para>
            <para>Call is audited on PDS</para>
            </remarks>
        </member>
        <member name="M:AdmPwd.PDSUtils.PdsWrapper.GetPublicKey(System.UInt32)">
            <summary>
            Asks PDS to return public key with specified key ID
            </summary>
            <param name="KeyId">Identifies key pair for which public key is returned</param>
            <returns>Return public key of key pair with given KeyID, along with key ID</returns>
            <remarks>
            <para>No specific permissions required</para>
            <para>Call is not audited</para>
            </remarks>
        </member>
        <member name="M:AdmPwd.PDSUtils.PdsWrapper.GetPublicKeys">
            <summary>
            Asks PDS to return public keys for all available key pairs.
            </summary>
            <returns>Returns list of all public keys managed by PDS, along with type of the key, size in bits, and key ID</returns>
            <remarks>
            <para>No specific permissions required</para>
            <para>Call is not audited</para>
            </remarks>
        </member>
        <member name="M:AdmPwd.PDSUtils.PdsWrapper.ResetLocalAdminPassword(System.String,System.String,System.DateTime)">
            <summary>
            Calls PDS to request reset of managed local admin password for given computer in given AD forest.
            </summary>
            <param name="ForestName">Name of AD forest.
            Forest must be marked as supported in PDS configuration.
            For local forest, pass null as parameter value</param>
            <param name="ComputerName">Name of computer where password of local admin account shall be reset</param>
            <param name="WhenEffective">When password reset shall occur. Password will be reset during next GPO update cycle on given computer after this time </param>
            <returns>Information about result of operation along with computer name and computer DN</returns>
            <remarks>
            <para>Caller must have Reset Local Admin Passsword permission on given computer object</para>
            <para>Call is audited on PDS</para>
            </remarks>
        </member>
        <member name="M:AdmPwd.PDSUtils.PdsWrapper.GetLocalAdminPassword(System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Retrieves password of managed local admin account of given computer in given AD forest
            </summary>
            <param name="ForestName">Name of AD forest.
            Forest must be marked as supported in PDS configuration.
            For local forest, pass null as parameter value</param>
            <param name="ComputerName">Name of computer where password of local admin account shall be reset</param>
            <param name="IncludePasswordHistory">Whether or not to include password history</param>
            <param name="ComputerIsDeleted">Whether computer is deleted or not.
            Note: there may be multiple deleted computer objects with the same name. In such case, passwoord for most recently computer is returned
            </param>
            <returns>Password, current password expiration time and optional password history</returns>
            <remarks>
            <para>Caller must have Read Local Admin Passsword permission on given computer object</para>
            <para>Call is audited on PDS</para>
            </remarks>
        </member>
        <member name="M:AdmPwd.PDSUtils.PdsWrapper.GetManagedAccountPassword(System.String,System.String,System.Boolean)">
            <summary>
            Retrieves password of managed account in given AD forest
            </summary>
            <param name="ForestName">
            Name of AD forest.
            <para>Forest must be marked as supported in PDS configuration.
            For local forest (forest where PDS is installed), you can pass null as parameter value
            </para>
            </param>
            <param name="AccountName">Name of account where password shall be read.
            Account name can be passed as sAMAccountName (without domain), userPrincipalName, or distinguishedName.
            </param>
            <param name="IncludePasswordHistory">Whether or not to include password history</param>
            <returns>Password, current password expiration time and optional password history</returns>
            <remarks>
            <para>Caller must have Read Local Admin Passsword permission on given managed account object</para>
            <para>Call is audited on PDS</para>
            </remarks>
        </member>
        <member name="M:AdmPwd.PDSUtils.PdsWrapper.IsKeyAdmin">
            <summary>
            Return information whether or not caller is in Key Admin role on PDS
            </summary>
            <returns>True if caller is in Key Admin role on PDS. Otherwise returns false.</returns>
            <remarks>
            <para>Used by Web UI to properly render UI and allow users in KeyAdmin role to see key pair management UI</para>
            <para>No specific permissions required</para>
            <para>Call is not audited</para>
            </remarks>
        </member>
        <member name="M:AdmPwd.PDSUtils.PdsWrapper.GetSupportedKeySizes">
            <summary>
            Used to retrieve key sizes supported by PDS
            </summary>
            <returns>List of supported key sizes, in bits</returns>
            <remarks>
            <para>PDS only creates key pairs of supported sizes; however it can decrypt passwords encrypted by any valid RSA key - see <see cref="M:AdmPwd.PDSUtils.PdsWrapper.GenerateKeyPair(System.Int32)"/> method to see how to generate new key pair </para>
            <para>No specific permissions required</para>
            <para>Call is not audited</para>
            </remarks>
        </member>
        <member name="M:AdmPwd.PDSUtils.PdsWrapper.GetKeyAdminsRoleName">
            <summary>
            Used to retrievee name of AD group that implements Key Admin role. Members of the group hold Key Admin role on PDS
            </summary>
            <returns>Returns name of AD group that is configured on PDS as Key Admin role group</returns>
            <remarks>
            <para>No specific permissions required</para>
            <para>Call is not audited</para>
            </remarks>
        </member>
        <member name="M:AdmPwd.PDSUtils.PdsWrapper.GetUserPermissions(System.String,System.String,System.String)">
            <summary>
            Used to retrieve information about AdmPwd permissions that given user has on computer object, as seen by PDS
            </summary>
            <param name="forestName">Name of AD forest.
            Forest must be marked as supported in PDS configuration.
            For local forest, pass null as parameter value</param>
            <param name="ComputerName">Name of computer where password of local admin account shall be reset</param>
            <param name="userUpn">UserPrincipalName of user in question.</param>
            <returns>List of solution specific perrmissions PDS finds for given user for given computer object </returns>
            <remarks>
            <para>This method uses Kerberos S2U4Self logon to obtain user's Kerberos ticket with group memebership</para>
            <para>No specific permissions required</para>
            <para>Call is not audited</para>
            </remarks>
        </member>
        <member name="M:AdmPwd.PDSUtils.PdsWrapper.GetEnvironmentStats">
            <summary>
            Retrieves environment status for managed environment: list of domains in each managed forest, and number of managed machines in each domain, and license status for managed environment
            </summary>
            <returns>Environment status for the solution</returns>
            <remarks>
            <para>No specific permissions required</para>
            <para>Call is not audited</para>
            </remarks>
        </member>
        <member name="M:AdmPwd.PDSUtils.PdsWrapper.ResetManagedAccountPassword(System.String,System.String,System.DateTime)">
             <summary>
             Calls PDS to request reset of managed account password in given AD forest.
             </summary>
             <param name="ForestName">Name of AD forest.
             <para>
             Forest must be marked as supported in PDS configuration.
             For local forest (forest where PDS is installed), you can pass null as parameter value
             </para>
            </param>
             <param name="Name">Name of account where password shall be reset.
             Account name can be passed as sAMAccountName (without domain), userPrincipalName, or distinguishedName.
             </param>
             <param name="WhenEffective">When password reset shall occur. Password will be reset during next GPO update cycle on given computer after this time </param>
             <returns>Information about result of operation along with computer name and computer DN</returns>
             <remarks>
             <para>Caller must have Reset Local Admin Passsword permission on given managed account object</para>
             <para>Call is audited on PDS</para>
             </remarks>
        </member>
        <member name="T:AdmPwd.Types.PasswordResetState">
            <summary>
            Status codes of password reset operation
            </summary>
        </member>
        <member name="F:AdmPwd.Types.PasswordResetState.PasswordReset">
            <summary>
            Successful password reset
            </summary>
        </member>
        <member name="T:AdmPwd.Types.PublicKey">
            <summary>
            Public key information
            </summary>
        </member>
        <member name="P:AdmPwd.Types.PublicKey.ID">
            <summary>
            ID of the key pair
            </summary>
        </member>
        <member name="P:AdmPwd.Types.PublicKey.Key">
            <summary>
            Public key blob encoded in Base64 format
            </summary>
        </member>
        <member name="P:AdmPwd.Types.PublicKey.Size">
            <summary>
            Size of the key in bits
            </summary>
        </member>
        <member name="P:AdmPwd.Types.PublicKey.Type">
            <summary>
            Type of the key. Currently supported types are CryptoAPI_RSA and CNG_RSA.
            </summary>
        </member>
        <member name="M:AdmPwd.Types.PublicKey.#ctor(System.UInt32,System.String,System.Int32,System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="id">ID of the key</param>
            <param name="key">Public key blob encoded as Base64 string</param>
            <param name="size">Size of the key in bits</param>
            <param name="type">Type of the key</param>
        </member>
        <member name="T:AdmPwd.Types.UserPermissionStats">
            <summary>
            Summary of solution specific permissions user has on AD computer object
            </summary>
        </member>
        <member name="P:AdmPwd.Types.UserPermissionStats.UserName">
            <summary>
            Name of user
            </summary>
        </member>
        <member name="F:AdmPwd.Types.UserPermissionStats.Permissions">
            <summary>
            List of permissions
            </summary>
        </member>
        <member name="T:AdmPwd.Types.PermissionEntry">
            <summary>
            Permission entry
            </summary>
        </member>
        <member name="P:AdmPwd.Types.PermissionEntry.AccessType">
            <summary>
            Allow or Deny
            </summary>
        </member>
        <member name="P:AdmPwd.Types.PermissionEntry.PermissionType">
            <summary>
            Read or Reset password or Full Control
            </summary>
        </member>
        <member name="P:AdmPwd.Types.PermissionEntry.Identity">
            <summary>
            which security principal gives the permission. User account or group user is member of
            </summary>
        </member>
        <member name="M:AdmPwd.Types.PermissionEntry.#ctor(System.String,System.String,System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="accType">Access type for permission entry</param>
            <param name="permType">Permission type</param>
            <param name="id">Identity that has the permission</param>
        </member>
        <member name="T:AdmPwd.Types.KeySize">
            <summary>
            RSA key size information
            </summary>
        </member>
        <member name="P:AdmPwd.Types.KeySize.Size">
            <summary>
            Size of RSA key in bits
            </summary>
        </member>
        <member name="M:AdmPwd.Types.KeySize.#ctor(System.Int32)">
            <summary>
            Constuctor
            </summary>
            <param name="size">Size of the key in bits (such as 20148)</param>
        </member>
        <member name="T:AdmPwd.Types.Role">
            <summary>
            Descriptor of PDS role
            </summary>
        </member>
        <member name="P:AdmPwd.Types.Role.Name">
            <summary>
            Name of the role.
            <para/>Currently, only KeyAdmin role is returned
            </summary>
        </member>
        <member name="M:AdmPwd.Types.Role.#ctor(System.String)">
            <summary>
            Default constructor
            </summary>
            <param name="name">Name of the role</param>
        </member>
        <member name="T:AdmPwd.Types.PasswordResetStatus">
            <summary>
            Descriptor of Reset password operation.
            Returned by the following cmdlets:
            <para/>  Reset-AdmPwdPassword
            <para/>  Reset-AdmPwdManagedAccountPassword
            </summary>
        </member>
        <member name="F:AdmPwd.Types.PasswordResetStatus.Name">
            <summary>
            Name of user or computer for which was reset performed
            </summary>
        </member>
        <member name="F:AdmPwd.Types.PasswordResetStatus.DistinguishedName">
            <summary>
            DistinguishedName of computer
            </summary>
        </member>
        <member name="F:AdmPwd.Types.PasswordResetStatus.Status">
            <summary>
            Result of operation
            </summary>
        </member>
        <member name="M:AdmPwd.Types.PasswordResetStatus.#ctor(System.String,System.String,AdmPwd.Types.PasswordResetState)">
            <summary>
            Default constructor
            </summary>
            <param name="accountName">Name of the computer from request</param>
            <param name="dn">DistinguishedName of computer</param>
            <param name="state">Result of operation</param>
        </member>
        <member name="T:AdmPwd.Types.PasswordInfo">
            <summary>
            Structure that contains informtion about password of managed object
            Returned by the following cmdlets:
            <para/>    Get-AdmPwdPassword
            <para/>    Get-AdmPwdManagedAccountPassword
            </summary>
        </member>
        <member name="F:AdmPwd.Types.PasswordInfo.Name">
            <summary>
            Name of object
            </summary>
        </member>
        <member name="F:AdmPwd.Types.PasswordInfo.DistinguishedName">
            <summary>
            DistinguishedName of object
            </summary>
        </member>
        <member name="F:AdmPwd.Types.PasswordInfo.Password">
            <summary>
            Password of managed account - local admin account on computer or managed domain account
            </summary>
        </member>
        <member name="F:AdmPwd.Types.PasswordInfo.ExpirationTimestamp">
            <summary>
            Expiration time of password
            </summary>
        </member>
        <member name="F:AdmPwd.Types.PasswordInfo.KeyId">
            <summary>
            ID of RSA key that was used to encrypt the password
            <para/>0 if password is not encrypted
            </summary>
        </member>
        <member name="F:AdmPwd.Types.PasswordInfo.PasswordHistory">
            <summary>
            Password history information
            </summary>
        </member>
        <member name="T:AdmPwd.Types.PasswordHistory">
            <summary>
            Descriptor of password history.
            <para/>Returned as a member of <see cref="T:AdmPwd.Types.PasswordInfo"/> class
            </summary>
        </member>
        <member name="P:AdmPwd.Types.PasswordHistory.ValidSince">
            <summary>
            When password started to be valid
            </summary>
        </member>
        <member name="P:AdmPwd.Types.PasswordHistory.ValidUntil">
            <summary>
            When password was reset/replaced
            </summary>
        </member>
        <member name="P:AdmPwd.Types.PasswordHistory.Password">
            <summary>
            Password
            </summary>
        </member>
        <member name="P:AdmPwd.Types.PasswordHistory.KeyId">
            <summary>
            ID of RSA key that was used to encrypt the password
            <para/>0 if password is not encrypted
            </summary>
        </member>
        <member name="M:AdmPwd.Types.PasswordHistory.ToString">
            <summary>
            Overriden to better show data in PowerShell
            </summary>
            <returns>Password string in plain text</returns>
        </member>
        <member name="T:AdmPwd.Types.EnvironmentStatus">
            <summary>
            Descriptor of environment status
            </summary>
        </member>
        <member name="F:AdmPwd.Types.EnvironmentStatus.Domains">
            <summary>
            List of managed domains
            </summary>
        </member>
        <member name="F:AdmPwd.Types.EnvironmentStatus.LicensedMachines">
            <summary>
            License information: How many machines are licensed
            </summary>
        </member>
        <member name="F:AdmPwd.Types.EnvironmentStatus.MachineLicenseUsage">
            <summary>
            Percentage of license consumption
            </summary>
        </member>
        <member name="F:AdmPwd.Types.EnvironmentStatus.LicensedManagedAccounts">
            <summary>
            License information: How many managed domain accounts are licensed
            </summary>
        </member>
        <member name="F:AdmPwd.Types.EnvironmentStatus.ManagedAccountsLicenseUsage">
            <summary>
            Percentage of license consumption for managed domain accounts
            </summary>
        </member>
        <member name="F:AdmPwd.Types.EnvironmentStatus.LicenseExpires">
            <summary>
            License information: When license expires
            </summary>
        </member>
        <member name="T:AdmPwd.Types.DomainStatus">
            <summary>
            Class shows status for managed machines and user accounts in particular domain:
            <para/>    Count of all machines that have admin password populated
            <para/>    Count of live machines (changed their password within last 60 days)
            <para/>    Count of managed domain user accounts
            </summary>
        </member>
        <member name="F:AdmPwd.Types.DomainStatus.Name">
            <summary>
            DNS name of domain
            </summary>
        </member>
        <member name="F:AdmPwd.Types.DomainStatus.ManagedMachines">
            <summary>
            Number of managed machines - machines that have local admin password reported in AD and changed its password within last 60 days.
            <para/>Only those machines are counted as license consumers
            </summary>
        </member>
        <member name="F:AdmPwd.Types.DomainStatus.ManagedMachinesTotal">
            <summary>
            Total number of managed machines - all machines that have local admin password reported in AD, regardless whether they're alive or not
            </summary>
        </member>
        <member name="F:AdmPwd.Types.DomainStatus.ManagedAccounts">
            <summary>
            Number of managed domain user accounts - user accounts that have their password managed by PDS
            </summary>
        </member>
        <member name="M:AdmPwd.Types.DomainStatus.ToString">
            <summary>
            Overriden to show more information in PowerShell
            </summary>
            <returns>Name of domain and number of managed machines in domain</returns>
        </member>
        <member name="T:AdmPwd.Types.AutodiscoverException">
            <summary>
            Exception thrown by PDS autodiscover process
            </summary>
        </member>
        <member name="M:AdmPwd.Types.AutodiscoverException.#ctor(System.String)">
            <summary>
            Default constructor used by autodiscover logic
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="T:AdmPwd.Types.IssueType">
            <summary>
            Type of issue encountered by PDS
            </summary>
        </member>
        <member name="F:AdmPwd.Types.IssueType.ComputerNotFound">
            <summary>
            Computer account was not found
            </summary>
        </member>
        <member name="F:AdmPwd.Types.IssueType.ComputerAmbiguous">
            <summary>
            Computer name is not unique
            </summary>
        </member>
        <member name="F:AdmPwd.Types.IssueType.AccessDenied">
            <summary>
            User does not have a permission to perform given operation
            </summary>
        </member>
        <member name="F:AdmPwd.Types.IssueType.KeyAdminRoleNotFound">
            <summary>
            Group that is configured as KeyAdmin role is not found
            </summary>
        </member>
        <member name="F:AdmPwd.Types.IssueType.SupportedKeySizesNotFound">
            <summary>
            Supported key sizes configuration element is not configured
            </summary>
        </member>
        <member name="F:AdmPwd.Types.IssueType.PublicKeyNotFound">
            <summary>
            Public key with given ID is not found
            </summary>
        </member>
        <member name="F:AdmPwd.Types.IssueType.CannotValidateAdminPrivilege">
            <summary>
            Cannot find out whether user holds KeyAdmin role
            </summary>
        </member>
        <member name="F:AdmPwd.Types.IssueType.CannotGenerateKeyPair">
            <summary>
            Cannot generate key pair
            </summary>
        </member>
        <member name="F:AdmPwd.Types.IssueType.CannotRetrievePassword">
            <summary>
            Cannot retrieve password
            </summary>
        </member>
        <member name="F:AdmPwd.Types.IssueType.CannotResetPassword">
            <summary>
            Cannot reset password
            </summary>
        </member>
        <member name="F:AdmPwd.Types.IssueType.ComputerNotLicensed">
            <summary>
            Not enough licenses to process the request
            </summary>
        </member>
        <member name="F:AdmPwd.Types.IssueType.CannotEvaluateUserPermissions">
            <summary>
            Cannot evaluate user's permissions on given object
            </summary>
        </member>
        <member name="F:AdmPwd.Types.IssueType.ForestNotSupported">
            <summary>
            Forest DNS name is not listed as supported AD forest in PDS configuration
            </summary>
        </member>
        <member name="T:AdmPwd.Types.PDSException">
            <summary>
            Contains information about error encountered on PDS side
            </summary>
        </member>
        <member name="F:AdmPwd.Types.PDSException.IssueCode">
            <summary>
            Type of issue
            </summary>
        </member>
        <member name="F:AdmPwd.Types.PDSException.Issue">
            <summary>
            Textual description of issue
            </summary>
        </member>
        <member name="F:AdmPwd.Types.PDSException.Details">
            <summary>
            Detailed information about error
            </summary>
        </member>
        <member name="F:AdmPwd.Types.PDSException.AdditionalInformation">
            <summary>
            Issue specific data. Currently used to return list of computers with the same name for <see cref="F:AdmPwd.Types.IssueType.ComputerAmbiguous" /> issue
            </summary>
        </member>
        <member name="M:AdmPwd.Types.PDSException.#ctor(System.String,System.Exception)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception message</param>
            <param name="ex">Inner exception</param>
        </member>
    </members>
</doc>
